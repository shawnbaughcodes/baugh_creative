{
  "_args": [
    [
      {
        "raw": "https://github.com/wagerfield/parallax",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/wagerfield/parallax",
        "spec": "git+https://github.com/wagerfield/parallax.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:wagerfield/parallax.git",
          "sshUrl": "git+ssh://git@github.com/wagerfield/parallax.git",
          "httpsUrl": "git+https://github.com/wagerfield/parallax.git",
          "gitUrl": "git://github.com/wagerfield/parallax.git",
          "shortcut": "github:wagerfield/parallax",
          "directUrl": "https://raw.githubusercontent.com/wagerfield/parallax/master/package.json"
        }
      },
      "/Users/shawnbaughcreatives/Desktop/baugh_creative"
    ]
  ],
  "_from": "git+https://github.com/wagerfield/parallax.git",
  "_id": "parallax-js@3.0.0",
  "_inCache": true,
  "_location": "/parallax-js",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/wagerfield/parallax",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/wagerfield/parallax",
    "spec": "git+https://github.com/wagerfield/parallax.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:wagerfield/parallax.git",
      "sshUrl": "git+ssh://git@github.com/wagerfield/parallax.git",
      "httpsUrl": "git+https://github.com/wagerfield/parallax.git",
      "gitUrl": "git://github.com/wagerfield/parallax.git",
      "shortcut": "github:wagerfield/parallax",
      "directUrl": "https://raw.githubusercontent.com/wagerfield/parallax/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/wagerfield/parallax.git#ebdc3a2c11baf83d68a8b5bdf5ec051f3f1c757b",
  "_shasum": "7eaa21db4a835a3db3d9625e4681bfb61718d894",
  "_shrinkwrap": null,
  "_spec": "https://github.com/wagerfield/parallax",
  "_where": "/Users/shawnbaughcreatives/Desktop/baugh_creative",
  "author": {
    "name": "Matthew Wagerfield",
    "email": "matthew@wagerfield.com"
  },
  "bugs": {
    "url": "https://github.com/wagerfield/parallax/issues"
  },
  "dependencies": {
    "babel-cli": "^6.24.1",
    "babel-preset-es2015": "^6.24.1",
    "browserify": "^14.0.0",
    "object-assign": "^4.1.1",
    "raf": "^3.3.0",
    "uglify-js": "^2.7.5"
  },
  "description": "Parallax Engine that reacts to the orientation of a smart device.",
  "devDependencies": {
    "autoprefixer": "^6.7.2",
    "babelify": "^7.3.0",
    "browser-sync": "^2.18.7",
    "gulp": "^3.9.1",
    "gulp-postcss": "^6.3.0",
    "gulp-rename": "^1.2.2",
    "gulp-sass": "^3.1.0",
    "gulp-sourcemaps": "^2.4.0",
    "gulp-uglify": "^2.0.1",
    "gulp-util": "^3.0.8",
    "node-notifier": "^5.0.2",
    "rimraf": "^2.5.4",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "directories": {
    "example": "examples"
  },
  "gitHead": "ebdc3a2c11baf83d68a8b5bdf5ec051f3f1c757b",
  "homepage": "http://wagerfield.github.io/parallax/",
  "keywords": [
    "parallax",
    "gyroscope",
    "jquery",
    "javascript",
    "library"
  ],
  "license": "MIT",
  "main": "dist/parallax.js",
  "name": "parallax-js",
  "optionalDependencies": {},
  "readme": "![Parallax.js](logo.png)\n\nParallax Engine that reacts to the orientation of a smart device. Where no gyroscope or motion detection hardware is available, the position of the cursor is used instead.\n\nCheck out this **[demo][demo]** to see it in action!\n\n## Setup\n\nAdd parallax.js to your project with `npm install --save https://github.com/wagerfield/parallax` or `yarn add https://github.com/wagerfield/parallax`.  \nNow, you can require or import the library, depending on your favorite workflow.\n\n```javascript\nconst Parallax = require('parallax-js')\n// or\nimport Parallax from 'parallax-js'\n```\n\nOf course you can also simply copy over the compiled file from the `dist` folder and include it like any other 3rd party script. Make sure to run `npm install` in the Parallax folder to compile the project. Or download the precompiled files from the [release section](https://github.com/wagerfield/parallax/releases).\n\n```html\n<script src=\"dist/parallax.js\"></script>\n<!-- or if you prefer minified -->\n<script src=\"dist/parallax.min.js\"></script>\n```\n\nCreate a list of elements giving each item that you want to move within your parallax scene a class of `layer` and a `data-depth` attribute specifying its depth within the scene. A depth of **0** will cause the layer to remain stationary, and a depth of **1** will cause the layer to move by the total effect of the calculated motion. Values inbetween **0** and **1** will cause the layer to move by an amount relative to the supplied ratio.\n\n```html\n<div id=\"scene\">\n  <div class=\"layer\" data-depth=\"0.00\"><img src=\"layer1.png\"></div>\n  <div class=\"layer\" data-depth=\"0.20\"><img src=\"layer2.png\"></div>\n  <div class=\"layer\" data-depth=\"0.40\"><img src=\"layer3.png\"></div>\n  <div class=\"layer\" data-depth=\"0.60\"><img src=\"layer4.png\"></div>\n  <div class=\"layer\" data-depth=\"0.80\"><img src=\"layer5.png\"></div>\n  <div class=\"layer\" data-depth=\"1.00\"><img src=\"layer6.png\"></div>\n</div>\n```\n\nTo kickoff a **Parallax** scene, select your parent DOM Element and pass it to the **Parallax** constructor.\n\n```javascript\nvar scene = document.getElementById('scene')\n// or, if you use jQuery\nvar scene = $('#scene').get(0)\n\nvar parallax = new Parallax(scene)\n```\n\n## Interactivity\n\nIf you need to interact with the layers, don't forget to set the `pointerEvents` option, and adjust your layer CSS.  \nThen set an absolute position for all layer child elements, just like it's done in `examples/pages/interactive.html`. Alternatively, set `pointer-events: none` on the layers and `pointer-events: all` on the layer child elements.\n\n## Understanding Layer Motion Calculations\n\nThe amount of motion that each layer moves by depends on 3 contributing factors:\n\n1. The `scalarX` and `scalarY` values (see [Behaviours](#behaviours) below for configuration)\n2. The dimensions of the parent DOM element\n3. The `depth` of a layer within a parallax scene (specified by it's `data-depth` attribute)\n\nThe calculation for this motion is as follows:\n\n```javascript\nxMotion = parentElement.width  * (scalarX / 100) * layerDepth\nyMotion = parentElement.height * (scalarY / 100) * layerDepth\n```\n\nSo for a layer with a `data-depth` value of `0.5` within a scene that has both the `scalarX` and `scalarY` values set to `10` ( *the default* ) where the containing scene element is `1000px x 1000px`, the total motion of the layer in both `x` and `y` would be:\n\n```javascript\nxMotion = 1000 * (10 / 100) * 0.5 = 50 // 50px of positive and negative motion in x\nyMotion = 1000 * (10 / 100) * 0.5 = 50 // 50px of positive and negative motion in y\n```\n\n## Behaviours\n\nThere are a number of behaviours that you can setup for any given **Parallax** instance. These behaviours can either be specified in the markup via data attributes or in JavaScript via the constructor and API.\n\n| Behaviour           | Values              | Default       | Description                                                                                                                                          |\n| ------------------- | ------------------- | ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `relativeInput`     | `true` or `false`   | `false`       | Specifies whether or not to use the coordinate system of the scene. **Mouse input only.**                                                            |\n| `clipRelativeInput` | `true` or `false`   | `false`       | Specifies whether or not to clip the mouse input to the scene bounds. No effect in combination with `hoverOnly`. **Mouse input only.**               |\n| `hoverOnly`         | `true` or `false`   | `false`       | Apply the parallax effect only while the cursor is over the scene. Best together with `relativeInput` set to true. **Mouse input only.**             |\n| `inputElement`         | `null` or HTML element   | `null`       | Element used for input calculations. Works only with `relativeInput`, might make sense to set `hoverOnly`. When set via `data-input-element` attribute, takes a query selector. **Mouse input only.** |\n| `calibrate-x`       | `true` or `false`   | `false`       | Specifies whether or not to cache & calculate the motion relative to the initial `x` axis value on initialisation.                                   |\n| `calibrate-y`       | `true` or `false`   | `true`        | Specifies whether or not to cache & calculate the motion relative to the initial `y` axis value on initialisation.                                   |\n| `invert-x`          | `true` or `false`   | `true`        | `true` moves layers in opposition to the device motion, `false` slides them away.                                                                    |\n| `invert-y`          | `true` or `false`   | `true`        | `true` moves layers in opposition to the device motion, `false` slides them away.                                                                    |\n| `limit-x`           | `number` or `false` | `false`       | A numeric value limits the total range of motion in `x`, `false` allows layers to move with complete freedom.                                        |\n| `limit-y`           | `number` or `false` | `false`       | A numeric value limits the total range of motion in `y`, `false` allows layers to move with complete freedom.                                        |\n| `scalar-x`          | `number`            | `10.0`        | Multiplies the input motion by this value, increasing or decreasing the sensitivity of the layer motion.                                             |\n| `scalar-y`          | `number`            | `10.0`        | Multiplies the input motion by this value, increasing or decreasing the sensitivity of the layer motion.                                             |\n| `friction-x`        | `number` `0 - 1`    | `0.1`         | The amount of friction the layers experience. This essentially adds some easing to the layer motion.                                                 |\n| `friction-y`        | `number` `0 - 1`    | `0.1`         | The amount of friction the layers experience. This essentially adds some easing to the layer motion.                                                 |\n| `origin-x`          | `number`            | `0.5`         | The `x` origin of the mouse input. Defaults to 0.5 (the center). `0` moves the origin to the left edge, `1` to the right edge. **Mouse input only.** |\n| `origin-y`          | `number`            | `0.5`         | The `y` origin of the mouse input. Defaults to 0.5 (the center). `0` moves the origin to the top edge, `1` to the bottom edge. **Mouse input only.** |\n| `precision`         | `integer`           | `1`           | Decimals the element positions should be rounded to. Changing this value should not be necessary anytime soon.                                       |\n| `pointerEvents`     | `true` or `false`   | `false`       | Leaving this at false might increase the performance in some instances, while removing pointer events for the scene - eg, Links are not clickable    |\n\nIn addition to the behaviours described above, there are the methods `enable()` and `disable()` that *activate* and *deactivate* the **Parallax** instance respectively.\n\n### Behaviours: Data Attributes Example\n\n```html\n<div id=\"scene\"\n  data-relative-input=\"true\"\n  data-clip-relative-input=\"false\"\n  data-hover-only=\"true\"\n  data-input-element=\"#myinput\"\n  data-calibrate-x=\"false\"\n  data-calibrate-y=\"true\"\n  data-invert-x=\"false\"\n  data-invert-y=\"true\"\n  data-limit-x=\"false\"\n  data-limit-y=\"10\"\n  data-scalar-x=\"2\"\n  data-scalar-y=\"8\"\n  data-friction-x=\"0.2\"\n  data-friction-y=\"0.8\"\n  data-origin-x=\"0.0\"\n  data-origin-y=\"1.0\"\n  data-precision=\"1\"\n  data-pointer-events=\"false\">\n  <div class=\"layer\" data-depth=\"0.00\"><img src=\"graphics/layer1.png\"></div>\n  <div class=\"layer\" data-depth=\"0.20\"><img src=\"graphics/layer2.png\"></div>\n  <div class=\"layer\" data-depth=\"0.40\"><img src=\"graphics/layer3.png\"></div>\n  <div class=\"layer\" data-depth=\"0.60\"><img src=\"graphics/layer4.png\"></div>\n  <div class=\"layer\" data-depth=\"0.80\"><img src=\"graphics/layer5.png\"></div>\n  <div class=\"layer\" data-depth=\"1.00\"><img src=\"graphics/layer6.png\"></div>\n</div>\n```\n\n### Behaviours: Constructor Object Example\n\n```javascript\nvar scene = document.getElementById('scene');\nvar parallax = new Parallax(scene, {\n  relativeInput: true,\n  clipRelativeInput: false,\n  hoverOnly: true,\n  inputElement: document.getElementById('myinput'),\n  calibrateX: false,\n  calibrateY: true,\n  invertX: false,\n  invertY: true,\n  limitX: false,\n  limitY: 10,\n  scalarX: 2,\n  scalarY: 8,\n  frictionX: 0.2,\n  frictionY: 0.8,\n  originX: 0.0,\n  originY: 1.0,\n  precision: 1,\n  pointerEvents: false\n});\n```\n\n### Behaviours: API Example\n\n```javascript\nvar scene = document.getElementById('scene');\nvar parallax = new Parallax(scene);\nparallax.enable();\nparallax.disable();\nparallax.updateLayers(); // Useful for reparsing the layers in your scene if you change their data-depth value\nparallax.calibrate(false, true);\nparallax.invert(false, true);\nparallax.limit(false, 10);\nparallax.scalar(2, 8);\nparallax.friction(0.2, 0.8);\nparallax.origin(0.0, 1.0);\nparallax.setInputElement(document.getElementById('newinput'));\n```\n\n## iOS\n\nIf you are writing a **native iOS application** and would like to use **parallax.js** within a `UIWebView`, you will need to do a little bit of work to get it running.\n\n`UIWebView` no longer automatically receives the `deviceorientation` event, so your native application must intercept the events from the gyroscope and reroute them to the `UIWebView`:\n\n1. Include the **CoreMotion** framework `#import <CoreMotion/CoreMotion.h>` and create a reference to the **UIWebView** `@property(nonatomic, strong) IBOutlet UIWebView *parallaxWebView;`\n2. Add a property to the app delegate (or controller that will own the **UIWebView**) `@property(nonatomic, strong) CMMotionManager *motionManager;`\n3. Finally, make the following calls:\n\n```Objective-C\nself.motionManager = [[CMMotionManager alloc] init];\nif (self.motionManager.isGyroAvailable && !self.motionManager.isGyroActive) {\n  [self.motionManager setGyroUpdateInterval:0.5f]; // Set the event update frequency (in seconds)\n  [self.motionManager startGyroUpdatesToQueue:NSOperationQueue.mainQueue\n                                  withHandler:^(CMGyroData *gyroData, NSError *error) {\n    NSString *js = [NSString stringWithFormat:@\"parallax.onDeviceOrientation({beta:%f, gamma:%f})\", gyroData.rotationRate.x, gyroData.rotationRate.y];\n    [self.parallaxWebView stringByEvaluatingJavaScriptFromString:js];\n  }];\n}\n```\n\n## Build\n\n> As a prerequisite, you will need [gulp][gulp] installed: `npm install -g gulp`\n\n```\nnpm install\ngulp\n```\n\ngulp will watch the `source` directory for changes and automatically build the `dist` files, serving some demo files with live reload.\n\n## Authors\n\nMatthew Wagerfield: [@wagerfield][twittermw]  \nRené Roth: [Website][websiterr]\n\n## License\n\nLicensed under [MIT][mit]. Enjoy.\n\n[demo]: http://wagerfield.github.com/parallax/\n[twittermw]: http://twitter.com/wagerfield\n[websiterr]: http://reneroth.org/\n[mit]: http://www.opensource.org/licenses/mit-license.php\n[gulp]: http://gulpjs.com/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/wagerfield/parallax.git"
  },
  "scripts": {
    "build": "rm -rf dist && mkdir dist && browserify src/parallax.js --standalone Parallax -o dist/parallax.js && babel dist/parallax.js --no-babelrc --presets=es2015 --out-file dist/parallax.js && uglifyjs dist/parallax.js -o dist/parallax.min.js --source-map dist/parallax.min.js.map -p relative",
    "install": "npm run build"
  },
  "version": "3.0.0"
}
